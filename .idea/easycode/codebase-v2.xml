<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/com/sci/criteria/FilterQuery.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/criteria/Operator.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/dao/DBCinema.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/dao/DBConfig.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/dao/DBEmployee.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/dao/DBStudent.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/models/Actor.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/models/Address.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/models/City.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/models/Employee.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/models/Movie.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/models/Student.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/EmployeeApp.java;C:/Users/L/Desktop/CS308Spring2022/src/main/java/com/sci/StudentApp.java;C:/Users/L/Desktop/CS308Spring2022/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/L/Desktop/CS308Spring2022&quot;:&quot;{\&quot;/src/main/java/com/sci/dao/DBCinema.java\&quot;:\&quot;This file appears to be a Java class named `DBCinema` that interacts with a database to retrieve and display information about actors, addresses, cities, and movies.\\n\\n`DBCinema`: A class that provides methods to retrieve data from a database and display it.\\n\\n`getAddresses()`: A method that retrieves a list of all addresses from the database.\\n`getCities()`: A method that retrieves a list of all cities from the database.\\n`getActors()`: A method that retrieves a list of all actors from the database.\\n`getMovies()`: A method that retrieves a list of all movies from the database.\\n`main(String[] args)`: The main method that creates an instance of the `DBCinema` class and calls the various retrieval methods to display the data.\&quot;,\&quot;/src/main/java/com/sci/models/Address.java\&quot;:\&quot;This file defines a Java class `Address` that represents an address entity in a database. The class is annotated with Lombok annotations to generate boilerplate code such as constructors, getters, and setters.\\n\\n`Address`: A class that represents an address entity in a database, with properties for the address ID and street.\&quot;,\&quot;/src/main/java/com/sci/models/Actor.java\&quot;:\&quot;This file defines a Java class `Actor` that represents an actor in a movie database. The class has several properties, including an ID, name, address ID, and city ID. The class also has relationships with other entities, such as `Address`, `City`, and `Movie`.\\n\\n`Actor`: A class that represents an actor in a movie database, with properties such as ID, name, address ID, and city ID, and relationships with other entities.\\n\\n`address`: A one-to-one relationship with the `Address` entity, representing the actor\\u0027s address.\\n\\n`city`: A many-to-one relationship with the `City` entity, representing the actor\\u0027s city.\\n\\n`movies`: A many-to-many relationship with the `Movie` entity, representing the movies the actor has appeared in.\&quot;,\&quot;/src/main/java/com/sci/models/Student.java\&quot;:\&quot;This file defines a Java class `Student` that represents a student entity in a database. The class is annotated with various Hibernate and JPA annotations to configure the mapping between the class and the corresponding database table.\\n\\n`Student`: A class that represents a student entity in the database, with properties such as student ID, name, address, age, and joined date.\\n\\n`serialVersionUID`: A static final field that represents the unique identifier for the serializable version of the `Student` class.\\n\\n`studentId`: A property that represents the unique identifier for the student.\\n`studentName`: A property that represents the name of the student.\\n`studentAddress`: A property that represents the address of the student.\\n`studentAge`: A property that represents the age of the student.\\n`joinedDate`: A property that represents the date the student joined the institution.\&quot;,\&quot;/src/main/java/com/sci/StudentApp.java\&quot;:\&quot;This file appears to be a Java application that interacts with a database using Hibernate. It contains the following classes and functions:\\n\\n`StudentApp`: The main class that demonstrates various database operations and caching scenarios.\\n\\n`testCache1()`: Demonstrates the caching behavior of Hibernate by retrieving the same student records multiple times within a session.\\n\\n`testCache2()`: Demonstrates the caching behavior of Hibernate by retrieving a student record within a new session.\\n\\n`main(String[] args)`: The main entry point of the application, which performs various database operations, such as filtering and retrieving student records.\\n\\n`DBStudent`: A class that encapsulates the database operations for the `Student` model.\\n\\n`getByFilter(List\\u003cFilterQuery\\u003e filterQueries)`: Retrieves a list of `Student` objects based on the provided filter queries.\\n\\n`DBConfig`: A class that manages the Hibernate session factory and database configuration.\\n\\n`shutdown()`: Shuts down the Hibernate session factory.\&quot;,\&quot;/src/main/java/com/sci/criteria/FilterQuery.java\&quot;:\&quot;This file contains a single class:\\n\\n`FilterQuery`: A data class that represents a filter query with an attribute name, attribute value, and an operator.\\n\\nThis file does not contain any functions. It is a simple data class that is used to represent a filter query with an attribute name, attribute value, and an operator.\&quot;,\&quot;/src/main/java/com/sci/dao/DBEmployee.java\&quot;:\&quot;This file contains a single class `DBEmployee` that provides methods for interacting with a database of employees.\\n\\n`DBEmployee`: A class that provides methods for performing CRUD (Create, Read, Update, Delete) operations on a database of employees.\\n\\n`get()`: Retrieves a list of all employees from the database.\\n`get(Integer employeeId)`: Retrieves a single employee from the database based on their ID.\\n`insert(Employee employee)`: Inserts a new employee into the database.\\n`update(Employee employee)`: Updates an existing employee in the database.\\n`delete(Integer employeeId)`: Deletes an employee from the database based on their ID.\\n`getByFilter(List\\u003cFilterQuery\\u003e filterQueries)`: Retrieves a list of employees from the database based on a set of filter criteria.\&quot;,\&quot;/src/main/java/com/sci/dao/DBConfig.java\&quot;:\&quot;This file contains a single class and two functions:\\n\\n`DBConfig`: This class is responsible for configuring and managing the Hibernate session factory.\\n\\n`SESSION_FACTORY`: This static field initializes the Hibernate session factory by loading the configuration from the `hibernate.cfg.xml` file.\\n\\n`shutdown()`: This function closes the Hibernate session factory when the application is shutting down.\&quot;,\&quot;/src/main/java/com/sci/models/Movie.java\&quot;:\&quot;This file defines a `Movie` class, which is an entity class used for mapping a movie table in a database. The file does not contain any functions, but rather focuses on defining the properties and relationships of the `Movie` class.\\n\\n`Movie`: A class that represents a movie entity, with properties such as `id` and `name`.\\n\\nThe file also includes several annotations, such as `@Entity`, `@Table`, `@Data`, `@NoArgsConstructor`, and `@AllArgsConstructor`, which are used to configure the mapping of the `Movie` class to the database table and provide convenience methods for the class.\\n\\nAdditionally, the file includes a commented-out `@ManyToMany` relationship with the `Actor` class, which would allow for the association of multiple actors with a single movie.\&quot;,\&quot;/src/main/java/com/sci/criteria/Operator.java\&quot;:\&quot;This file defines an `Operator` enum, which represents the different types of comparison operators that can be used in a criteria-based search or filtering operation.\\n\\n`Operator`: An enum that represents the different types of comparison operators, including equal to (EQ), not equal to (NEQ), greater than (GT), greater than or equal to (GE), less than (LT), and less than or equal to (LE).\&quot;,\&quot;/src/main/java/com/sci/dao/DBStudent.java\&quot;:\&quot;This file contains a single class `DBStudent` that provides methods for interacting with a database table of `Student` objects.\\n\\n`DBStudent`: A class that provides methods for performing CRUD (Create, Read, Update, Delete) operations on a database table of `Student` objects.\\n\\n`get()`: Retrieves all `Student` objects from the database.\\n`get(Integer studentId)`: Retrieves a single `Student` object from the database based on the provided `studentId`.\\n`insert(Student student)`: Inserts a new `Student` object into the database and returns the generated `studentId`.\\n`update(Student student)`: Updates an existing `Student` object in the database.\\n`delete(Integer studentId)`: Deletes a `Student` object from the database based on the provided `studentId`.\\n`getByFilter(List\\u003cFilterQuery\\u003e filterQueries)`: Retrieves a list of `Student` objects from the database based on the provided filter queries.\&quot;,\&quot;/src/main/java/com/sci/EmployeeApp.java\&quot;:\&quot;This file contains the `EmployeeApp` class and several functions that interact with a database to perform CRUD (Create, Read, Update, Delete) operations on employee data.\\n\\n`EmployeeApp`: The main class that contains the entry point for the application and various test methods.\\n\\n`testCache1()`: Demonstrates the caching behavior of Hibernate by retrieving the same employee records multiple times within a session.\\n\\n`testCache2()`: Demonstrates the caching behavior of Hibernate by retrieving a different employee record within a session.\\n\\n`main(String[] args)`: The entry point of the application, which showcases various database operations, such as filtering employees by job ID, retrieving all employees, and performing CRUD operations on individual employees.\&quot;,\&quot;/src/main/java/com/sci/models/City.java\&quot;:\&quot;This file defines a Java class `City` that represents a city entity in a database. The class is annotated with various JPA (Java Persistence API) annotations to map it to a database table and configure its properties.\\n\\n`City`: A class that represents a city entity in a database, with properties for the city\\u0027s ID and name.\\n\\nThe file does not contain any functions, as it is a simple data model class.\&quot;,\&quot;/src/main/java/com/sci/models/Employee.java\&quot;:\&quot;This file contains a single class, `Employee`, which is an entity class representing an employee in a human resources (HR) system.\\n\\n`Employee`: This class represents an employee in the HR system, with properties such as employee ID, first name, last name, email, phone number, hire date, job ID, salary, commission percentage, manager ID, and department ID.\\n\\nThe file does not contain any functions. It is a Java class that is annotated with various Hibernate and Lombok annotations to simplify the implementation of the entity class.\&quot;,\&quot;/README.md\&quot;:\&quot;This file does not contain any classes or functions. Instead, it provides a list of links and Maven dependencies related to the Hibernate framework, which is a popular Java object-relational mapping (ORM) library used for interacting with databases. The links cover Hibernate tutorials, examples, and information on using Hibernate with an Oracle database. The Maven dependencies provide the necessary libraries for using Hibernate, the Oracle JDBC driver, and the Ehcache caching library.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Users/L/Desktop/CS308Spring2022&quot;:&quot;{\&quot;/src/main/java/com/sci/criteria/FilterQuery.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/criteria/FilterQuery.java\&quot;,\&quot;file_name\&quot;:\&quot;FilterQuery.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/sci/criteria/Operator.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/criteria/Operator.java\&quot;,\&quot;file_name\&quot;:\&quot;Operator.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/sci/dao/DBCinema.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/dao/DBCinema.java\&quot;,\&quot;file_name\&quot;:\&quot;DBCinema.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;getAddresses\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,2],[24,3]]},{\&quot;method_name\&quot;:\&quot;getCities\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[26,2],[37,3]]},{\&quot;method_name\&quot;:\&quot;getActors\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[39,2],[50,3]]},{\&quot;method_name\&quot;:\&quot;getMovies\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[52,2],[63,3]]},{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[65,2],[100,3]]}]},\&quot;/src/main/java/com/sci/dao/DBConfig.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/dao/DBConfig.java\&quot;,\&quot;file_name\&quot;:\&quot;DBConfig.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;shutdown\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[10,2],[14,3]]}]},\&quot;/src/main/java/com/sci/dao/DBEmployee.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/dao/DBEmployee.java\&quot;,\&quot;file_name\&quot;:\&quot;DBEmployee.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;get\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[17,2],[30,3]]},{\&quot;method_name\&quot;:\&quot;get\&quot;,\&quot;method_parameters\&quot;:\&quot;(Integer employeeId)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Integer\&quot;,\&quot;name\&quot;:\&quot;employeeId\&quot;}],\&quot;return_type\&quot;:\&quot;Employee\&quot;,\&quot;scope\&quot;:[[32,2],[43,3]]},{\&quot;method_name\&quot;:\&quot;insert\&quot;,\&quot;method_parameters\&quot;:\&quot;(Employee employee)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Employee\&quot;,\&quot;name\&quot;:\&quot;employee\&quot;}],\&quot;return_type\&quot;:\&quot;Integer\&quot;,\&quot;scope\&quot;:[[46,2],[67,3]]},{\&quot;method_name\&quot;:\&quot;update\&quot;,\&quot;method_parameters\&quot;:\&quot;(Employee employee)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Employee\&quot;,\&quot;name\&quot;:\&quot;employee\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[69,2],[87,3]]},{\&quot;method_name\&quot;:\&quot;delete\&quot;,\&quot;method_parameters\&quot;:\&quot;(Integer employeeId)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Integer\&quot;,\&quot;name\&quot;:\&quot;employeeId\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[89,2],[109,3]]},{\&quot;method_name\&quot;:\&quot;getByFilter\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cFilterQuery\\u003e filterQueries)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;filterQueries\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[111,2],[150,3]]}]},\&quot;/src/main/java/com/sci/dao/DBStudent.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/dao/DBStudent.java\&quot;,\&quot;file_name\&quot;:\&quot;DBStudent.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;get\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[19,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;get\&quot;,\&quot;method_parameters\&quot;:\&quot;(Integer studentId)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Integer\&quot;,\&quot;name\&quot;:\&quot;studentId\&quot;}],\&quot;return_type\&quot;:\&quot;Student\&quot;,\&quot;scope\&quot;:[[34,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;insert\&quot;,\&quot;method_parameters\&quot;:\&quot;(Student student)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Student\&quot;,\&quot;name\&quot;:\&quot;student\&quot;}],\&quot;return_type\&quot;:\&quot;Integer\&quot;,\&quot;scope\&quot;:[[48,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;update\&quot;,\&quot;method_parameters\&quot;:\&quot;(Student student)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Student\&quot;,\&quot;name\&quot;:\&quot;student\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[89,5]]},{\&quot;method_name\&quot;:\&quot;delete\&quot;,\&quot;method_parameters\&quot;:\&quot;(Integer studentId)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Integer\&quot;,\&quot;name\&quot;:\&quot;studentId\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[91,4],[111,5]]},{\&quot;method_name\&quot;:\&quot;getByFilter\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cFilterQuery\\u003e filterQueries)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;filterQueries\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[113,4],[152,5]]}]},\&quot;/src/main/java/com/sci/models/Actor.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/models/Actor.java\&quot;,\&quot;file_name\&quot;:\&quot;Actor.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/sci/models/Address.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/models/Address.java\&quot;,\&quot;file_name\&quot;:\&quot;Address.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/sci/models/City.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/models/City.java\&quot;,\&quot;file_name\&quot;:\&quot;City.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/sci/models/Employee.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/models/Employee.java\&quot;,\&quot;file_name\&quot;:\&quot;Employee.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/sci/models/Movie.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/models/Movie.java\&quot;,\&quot;file_name\&quot;:\&quot;Movie.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/sci/models/Student.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/models/Student.java\&quot;,\&quot;file_name\&quot;:\&quot;Student.java\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/sci/EmployeeApp.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/EmployeeApp.java\&quot;,\&quot;file_name\&quot;:\&quot;EmployeeApp.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testCache1\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[14,2],[33,3]]},{\&quot;method_name\&quot;:\&quot;testCache2\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,2],[46,3]]},{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[48,2],[102,3]]}]},\&quot;/src/main/java/com/sci/StudentApp.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/sci/StudentApp.java\&quot;,\&quot;file_name\&quot;:\&quot;StudentApp.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testCache1\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[15,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testCache2\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[103,5]]}]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>